// Core exportsexport { SecurityManager } from './core/security';export { PerformanceManager } from './core/performance';export { ConfigManager } from './core/config';// Advanced features (v0.2.0)export { SecurityMonitor, SecurityEventType } from './core/security-monitor';export { AdvancedRateLimiter } from './core/advanced-rate-limiter';// Adapter exportsexport { ExpressAdapter } from './adapters/express';export { KoaAdapter } from './adapters/koa';export { FastifyAdapter } from './adapters/fastify';export {   SecureBackendMiddleware,   SecureBackendInterceptor,   SecureBackendJWTGuard,   SecureBackendRateLimitGuard,   SecureBackendFileUploadGuard,   SecureBackendController } from './adapters/nest';// Type exportsexport * from './types';// Main function for easy setupimport { SecureBackendConfig } from './types';import { ConfigManager } from './core/config';/** * Main function to create a secure backend configuration * @param presetOrConfig - Either a preset name ('api', 'webapp', 'strict') or a custom configuration object * @returns The validated configuration object */export function secureBackend(presetOrConfig: 'api' | 'webapp' | 'strict' | SecureBackendConfig): SecureBackendConfig {  return ConfigManager.createConfig(presetOrConfig);}/** * Create an Express adapter with the given configuration * @param config - The secure backend configuration * @returns ExpressAdapter instance */export function createExpressAdapter(config: SecureBackendConfig) {  return new (require('./adapters/express').ExpressAdapter)(config);}/** * Create a Koa adapter with the given configuration * @param config - The secure backend configuration * @returns KoaAdapter instance */export function createKoaAdapter(config: SecureBackendConfig) {  return new (require('./adapters/koa').KoaAdapter)(config);}/** * Create a Fastify adapter with the given configuration * @param config - The secure backend configuration * @returns FastifyAdapter instance */export function createFastifyAdapter(config: SecureBackendConfig) {  return new (require('./adapters/fastify').FastifyAdapter)(config);}/** * Create NestJS middleware with the given configuration * @param config - The secure backend configuration * @returns SecureBackendMiddleware instance */export function createNestMiddleware(config: SecureBackendConfig) {  return new (require('./adapters/nest').SecureBackendMiddleware)(config);}/** * Get a preset configuration * @param preset - The preset name ('api', 'webapp', 'strict') * @returns The preset configuration */export function getPreset(preset: 'api' | 'webapp' | 'strict'): SecureBackendConfig {  return ConfigManager.getPreset(preset);}/** * Merge configurations * @param base - The base configuration * @param override - The override configuration * @returns The merged configuration */export function mergeConfig(base: SecureBackendConfig, override: Partial<SecureBackendConfig>): SecureBackendConfig {  return ConfigManager.mergeConfig(base, override);}/** * Validate a configuration * @param config - The configuration to validate * @returns Validation result with errors if any */export function validateConfig(config: SecureBackendConfig) {  return ConfigManager.validateConfig(config);}/** * Get configuration summary * @param config - The configuration * @returns A summary of the configuration */export function getConfigSummary(config: SecureBackendConfig): string {  return ConfigManager.getConfigSummary(config);}// Default export for convenienceexport default secureBackend;
